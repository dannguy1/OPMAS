# Defines the initial SQLite database schema for the OPMAS Knowledge Base.

# This script can be run directly to create the database file or used by
# a KB management module to initialize the DB.

import logging
import os
import sqlite3

logger = logging.getLogger(__name__)

# Configuration (Replace with proper config later - Task #5)
DEFAULT_DB_PATH = os.path.join("data", "opmas_kb.db")

# Schema Definition
SCHEMA = """
-- Table to store information about managed OpenWRT devices
CREATE TABLE IF NOT EXISTS devices (
    device_id INTEGER PRIMARY KEY AUTOINCREMENT,
    hostname TEXT UNIQUE NOT NULL,      -- Unique hostname of the device
    ip_address TEXT NOT NULL,           -- Current IP address for management (SSH)
    ssh_port INTEGER DEFAULT 22,        -- SSH port
    ssh_user TEXT NOT NULL,             -- SSH username
    ssh_key_path TEXT NOT NULL,         -- Path to the private SSH key for this device
    model TEXT,                         -- Device model (optional)
    openwrt_version TEXT,               -- OpenWRT version (optional)
    last_seen TIMESTAMP,                -- Timestamp of last successful communication
    added_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table to store dynamic state information about devices
CREATE TABLE IF NOT EXISTS device_state (
    state_id INTEGER PRIMARY KEY AUTOINCREMENT,
    device_id INTEGER NOT NULL,
    state_key TEXT NOT NULL,            -- e.g., 'last_oom_time', 'wifi_failures_mac_aa:bb:cc'
    state_value TEXT,                   -- The value associated with the key
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (device_id) REFERENCES devices(device_id) ON DELETE CASCADE,
    UNIQUE (device_id, state_key)       -- Ensure only one value per key per device
);

-- Table to log findings generated by agents
CREATE TABLE IF NOT EXISTS findings_log (
    log_id INTEGER PRIMARY KEY AUTOINCREMENT,
    finding_id TEXT UNIQUE NOT NULL,    -- Unique ID from the finding message
    agent_name TEXT NOT NULL,
    finding_ts_utc TIMESTAMP NOT NULL,
    device_hostname TEXT NOT NULL,      -- Denormalized for easier querying
    device_ip TEXT NOT NULL,            -- Denormalized for easier querying
    severity TEXT NOT NULL,
    finding_type TEXT NOT NULL,
    description TEXT,
    details_json TEXT,                  -- Store the full details object as JSON
    received_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    -- Optional: Add foreign key to devices table if needed
    -- FOREIGN KEY (device_hostname) REFERENCES devices(hostname)
);

-- Table to log actions dispatched by the orchestrator and their results
CREATE TABLE IF NOT EXISTS actions_log (
    log_id INTEGER PRIMARY KEY AUTOINCREMENT,
    action_id TEXT UNIQUE NOT NULL,     -- Unique ID from the action command/result
    command_ts_utc TIMESTAMP,           -- Timestamp from Action Command
    result_ts_utc TIMESTAMP,            -- Timestamp from Action Result
    device_hostname TEXT NOT NULL,
    device_ip TEXT NOT NULL,
    action_type TEXT,
    command TEXT,                       -- The command that was intended/executed
    status TEXT,                        -- Result status (Success, Failed, Timeout)
    exit_code INTEGER,
    stdout TEXT,
    stderr TEXT,
    error_message TEXT,
    originating_finding_id TEXT,        -- Optional: Link back to the finding
    logged_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    -- Optional: Add foreign key to devices table
    -- Optional: Add foreign key to findings_log table
    -- FOREIGN KEY (originating_finding_id) REFERENCES findings_log(finding_id)
);

-- Optional: Indexes for performance
CREATE INDEX IF NOT EXISTS idx_device_state_key ON device_state (state_key);
CREATE INDEX IF NOT EXISTS idx_findings_log_type ON findings_log (finding_type);
CREATE INDEX IF NOT EXISTS idx_findings_log_device ON findings_log (device_hostname);
CREATE INDEX IF NOT EXISTS idx_actions_log_device ON actions_log (device_hostname);
"""


def create_schema(db_path=DEFAULT_DB_PATH):
    """Creates the database and tables if they don't exist."""
    conn = None
    try:
        # Ensure the data directory exists
        os.makedirs(os.path.dirname(db_path), exist_ok=True)

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.executescript(SCHEMA)
        conn.commit()
        logger.info(f"Database schema created or verified successfully at {db_path}")
    except sqlite3.Error as e:
        logger.error(f"Database error while creating schema at {db_path}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"An unexpected error occurred during schema creation: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()


if __name__ == "__main__":
    # Setup basic logging for testing
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    print(f"Creating OPMAS KB schema in database: {DEFAULT_DB_PATH}")
    create_schema()
    print("Schema creation process finished.")
